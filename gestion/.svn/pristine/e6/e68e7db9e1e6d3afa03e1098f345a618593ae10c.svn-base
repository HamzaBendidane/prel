<?php 

/*
 * Implements hook_permission().
 */
function block_cxm_permission() {
	return array(
		'administer cxm block rules' => array(
			'title' => t('administer cxm block rules'),
			'description' => t('create and manage cxm block rules'),	
		), 
	);
}

/* 
 * Implements hook_theme().
 */
function block_cxm_theme($existing, $type, $theme, $path) {
	return array(
		'layout_bloc_cxm' => array(
			'variables' => array('blocs' => array()),
			'template' => 'theme/layout-bloc-cxm',	
		),
	);
}

/* 
 * Preprocess node function. 
 */
function block_cxm_preprocess_node(&$variables) {
	// suggère un template node--bloc-rem--bloc-cxm.tpl.php
	// pour avoir un affichage unique
	if ($variables['type'] == 'bloc_rem') {
		global $base_url;
		
		$node = $variables['node'];
		$view_mode = $variables['view_mode'];
		
		$variables['node_target_link'] = $base_url . '/' . drupal_get_path_alias('node/' . $node->field_bloc_rem_link[LANGUAGE_NONE][0]['nid']);
		$variables['node_target_nid'] = $node->field_bloc_rem_link[LANGUAGE_NONE][0]['nid'];
		
		$variables['theme_hook_suggestions'][] = 'node__' . $node->type . '__' . str_replace('-', '_', $view_mode);
	}
}

/* 
 * Implements hook_menu().
 */
function block_cxm_menu() {
	$items = array();
	
	$items['admin/content/cxm_rules'] = array(
    'title' => 'Rules CXM',
    'page callback' => 'block_cxm_rules_admin_content',
    'access callback' => 'user_access',
    'access arguments' => array('administer cxm block rules'),
    'description' => 'View and edit all the available rule for REM blocks.',
    'file' => 'block_cxm.admin.inc',
    'type' => MENU_LOCAL_TASK,				
	);
	$items['admin/content/cxm_rules/default-blocks'] = array(
    'title' => 'Blocs REM par défaut',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('block_cxm_rules_default_block_form'),	
    'access callback' => 'user_access',
    'access arguments' => array('administer cxm block rules'),
    'description' => 'Define default REM blocks.',
    'file' => 'block_cxm.admin.inc',
	);
	$items['admin/content/CXM/bloc-rem-autocomplete'] = array(
    'title' => t('Configuration des bloc par défault'),
    'description' => t('Configuration des bloc par défault'),
    'type' => MENU_CALLBACK,
    'page callback' => '_ajax_get_block_rem',
    'page arguments' => array('block_cxm_rules_default_block_form'),
  	'file' => 'block_cxm.admin.inc',	
    'access arguments' => array('administer cxm block rules'),
  );
	
	return $items;
}

/* 
 * Implements hook_block_info().
 */
function block_cxm_block_info() {
	$blocks = array();
	
  $blocks['block_cxm_both'] = array(
  	'info' => 'Bloc_cxm : Bloc REM gauche et droite',
  	'cache' => DRUPAL_NO_CACHE,
  );
  
  return $blocks;
}

/* 
 * Implements hook_bloc_view(). 
 */
function block_cxm_block_view($delta = '') {
	$block = array();
	
	switch ($delta) {
		case 'block_cxm_both':
			$block['title'] = '';
			$block['content'] = check_cxm_block_rules();
			break;
	}
	
	return $block;
}

/* 
 * Implements hook_node_view().
 */
function block_cxm_node_view($node, $view_mode, $langcode) {
	// Enregistre dans un cookie les hit sur les tags des contenus devant être monitorés
	// pour la remontée des bloc REM
	global $base_url;
	$type = array('actu', 'page', 'webform');
	
	if (in_array($node->type, $type) && $view_mode == 'full') {
		$tagnav = array();
		
		if (!empty($node->field_tag_bloc_rem)) {

			if ($_COOKIE['tagNav']) {
				// on met a jour les valeurs du tableau du cookie s'il existe.
				$tagnav = drupal_json_decode($_COOKIE['tagNav']);
				foreach ($node->field_tag_bloc_rem[LANGUAGE_NONE] as $key => $term) {
					$tid = $term['tid'];
					if ($tagnav[$tid]) {
						$tagnav[$tid] += 1;
					} else {
						$tagnav[$tid] = 1 ;
					}
				}
				
			} else {
				// on instensie le cookie avec les tags courant quand il est vide
				foreach ($node->field_tag_bloc_rem[LANGUAGE_NONE] as $key => $term) {
					$tagnav[$term['tid']] = 1 ;
				}
			}
			// on encode le tableau crée ou mis à jour avec les données "tag" du noeud courant et on modifie le cookie
			$tagnav = json_encode($tagnav);
			setcookie('tagNav', $tagnav, 0, '/');	
		}
	}
}

/* 
 * Router function used to choose which block must be used.
 */
function check_cxm_block_rules() {
	global $user;
	// on prend l'id du noeud courant si on est sur une page de noeud, afin de filtrer les critere selon leur cible
	$current_nid = (preg_match('/^node\/[0-9]*$/', current_path())) ? arg(1) : FALSE;
	
	// On récupère la liste des id des règles déjà matchées pour les exclure de la recherche 
	// on la passe a chaque methode, sauf les bloc par défaut qui doivent toujours s'afficher
	$rules_matched = isset($_COOKIE['rulesMatched']) ? $_COOKIE['rulesMatched'] : array();
	
	$matching = array();
	
	$criteres = _check_role_and_date($current_nid, $rules_matched);
	$both_roledate_nids = !empty($criteres) ? $criteres : array(); 
	// si on a des résultat avec critere date et rôle alors on cherche sur le critère de tag
	if ($criteres) {
		$criteres = node_load_multiple($criteres) ;
		$matching = _apply_filter_on_tags($criteres);
	} 
	
	/**********************
	 * on check si il y en a avec role OU date
	*******************/
    $criteres = _all_role_and_date();
	$all_both_roledate_nids = !empty($criteres) ? $criteres : array(); 
	$criteres = _check_role_or_date($current_nid, $rules_matched, $all_both_roledate_nids);
	if ($criteres) {
		$matching = _apply_filter_on_tags($criteres, $matching);
	}

	// On check avec tag seulement
	$criteres = _check_on_tag_only($current_nid, $rules_matched);
	$tagnav = drupal_json_decode($_COOKIE['tagNav']) ;
	$matching = _apply_filter_on_tags($criteres, $matching);
	
	// on tri le tableau qu'on a prot soins de remplir avec pour index les priorité
	// on prend les 2 premier éléments
	ksort($matching);
	$matching = array_slice($matching, 0, 2);
	
	$blocs = array();
	foreach ($matching as $bid) {
		$blocs[] = node_load($bid);
	}
	
	// Si on a pas les  2 blocs nécessaire on va chercher autant de bloc par défaut que besoin.
	if (count($blocs) < 2 ) {
		$blocs = _get_default_blocks($current_nid, $blocs);
	}
	
	$blocs = node_view_multiple($blocs, 'bloc_cxm');
	
	return theme('layout_bloc_cxm', array('blocs' => $blocs)) ;
}

/* 
 * bring 2 default blocks, checking that none of them reference the current page.
 */
function _get_default_blocks($current_nid = FALSE, $blocs) {
	$nodes = array();
	if (is_numeric($current_nid)) {
		$bloc_cxm_default_1 = variable_get('bloc_cxm_default_1', '');
		$bloc_cxm_default_2 = variable_get('bloc_cxm_default_2', '');
		$bloc_cxm_default_3 = variable_get('bloc_cxm_default_3', '');
		
		$ids[] = preg_match('/\[nid:([0-9]*)\]/', $bloc_cxm_default_1, $matches) ? $matches[1] : '';
		$ids[] = preg_match('/\[nid:([0-9]*)\]/', $bloc_cxm_default_2, $matches) ? $matches[1] : '';
		$ids[] = preg_match('/\[nid:([0-9]*)\]/', $bloc_cxm_default_3, $matches) ? $matches[1] : '';

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'bloc_rem')
// 			->propertyCondition('status', '1')
			->propertyCondition('nid', $ids, 'in');
		if (is_numeric($current_nid)) {
			$query->fieldCondition('field_bloc_rem_link', 'nid', $current_nid, '<>');
		}
		$query->range(0, (2 - count($blocs)));
		
		$result = $query->execute();
		$nodes = array();
		if (isset($result['node'])) {
			$nids = array_keys($result['node']);
			$nodes = entity_load('node', $nids);
		}
	}
	
	return array_merge($blocs, $nodes);
}

/* 
 * test les critères de filtre pout toutes les règles matchées avec les critère précédents.
 */
function _apply_filter_on_tags($criteres, $matching = array()) {
	$matching_item = $matching;
	// récupère les valeurs du cookie pour connaitre la navigation
	if ($_COOKIE['tagNav']) {
		$tagnav = drupal_json_decode($_COOKIE['tagNav']) ;
	}
	foreach ($criteres as $key => $critere) {
		$wrapper = entity_metadata_wrapper('node', $critere);
		$isValid = FALSE ;
		
		// pour le critere courant
		if (!empty($critere->field_regles_sur_les_tags)) {
			foreach ($wrapper->field_regles_sur_les_tags->getIterator() as $delta => $tag_cond) {
				$tid = $tag_cond->field_tag_associe->value()->tid;
				$valHit = $tag_cond->field_nombre_occurrence->value();
				
				$minHit = isset($tagnav[$tid]) ? 0 : $tagnav[$tid];
				if ($tagnav[$tid] >= $valHit) {
					$isValid = TRUE;
				} else {
					// si un critère n'est aps validé le filtrene match pas, on stop la boucle et on reyourne FALSE;
					$isValid = FALSE;
					break;
				}
			}
			
			// si on a matché tous les critere de tag du filtre courant alors on a trouvé 
			// et on retourne le critere gagnant en stopant la boucle
			if ($isValid) {
				$matching_item[$wrapper->field_priorite->value()] = $wrapper->field_bloc_a_afficher->getIdentifier();
			}
		} else {
			$matching_item[$wrapper->field_priorite->value()] = $wrapper->field_bloc_a_afficher->getIdentifier();
		}
	}
	
	return $matching_item;
}

/* 
 * Remonte les fitre possédant les critère date et rôle validés.
 */
function _check_role_and_date($current_nid = FALSE, $rules_matched = array()) {
	global $user;
	$exclude_ids = array();
	if ($current_nid) {
		$exclude_ids[] = $current_nid;
	}
	if (!empty($rules_matched)) {
		$rules_matched = explode('|', $rules_matched);
		$exclude_ids = array_merge($exclude_ids, $rules_matched);
	}
	
	$query_base = db_select('node', 'n');
	$query_base->innerJoin('field_data_field_priorite', 'fp', 'fp.entity_id = n.nid');
	$query_base->fields('n', array('nid'));
	$query_base->condition('n.status', 1);
	$query_base->condition('n.type', 'rule_bloc_cxm');
	$query_base->orderBy('fp.field_priorite_value', 'ASC');
	$query_base->groupBy('n.nid');
	
	// On ajoute le filtre sur le profil user	.
	$query_base->innerJoin('field_data_field_critere_role', 'cr', 'cr.entity_id = n.nid');
	$query_base->innerJoin('role', 'r', 'cr.field_critere_role_value = r.rid');
	$query_base->Condition('r.name', $user->roles, 'in');
	
	//on ajoute le critère de date .
	$current_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
	$query_base->leftJoin('field_data_field_critere_sur_la_date', 'cd', ' cd.entity_id = n.nid');
	$query_base->condition('cd.field_critere_sur_la_date_value', $current_time, '<=');
	$query_base->condition('cd.field_critere_sur_la_date_value2', $current_time, '>=');

	// si on est sur la page d'un noeud on va chercher les bloc REM qui ont pour target ce noeud
	// afin de les exclure de la requête, via une sous-requête. 
	if (!empty($exclude_ids)) {
		$subquery = db_select('node', 'ns');
		$subquery->fields('ns', array('nid'));
		$subquery->innerJoin('field_data_field_bloc_rem_link', 'fl', 'ns.nid = fl.entity_id');
		$subquery->condition('ns.type', 'bloc_rem');
		$subquery->condition('fl.field_bloc_rem_link_nid', $exclude_ids, 'in');

		$query_base->innerJoin('field_data_field_bloc_a_afficher', 'fba', 'n.nid = fba.entity_id');
		$query_base->condition('fba.field_bloc_a_afficher_target_id', $subquery, 'not in');
	}
	
	$nids = $query_base->execute()->fetchCol();
	
	$q = db_select('node', 'n');
	$q->fields('n', array('nid'));
	$q->innerJoin('field_data_field_bloc_rem_link', 'fl', 'n.nid = fl.entity_id');
	$q->condition('n.type', 'bloc_rem');
	$q->condition('fl.field_bloc_rem_link_nid', $exclude_ids, 'in');
	$nidsss = $q->execute()->fetchCol();
	return !empty($nids) ? $nids : FALSE;
}

/* 
 * Remonte tous les fitres possédants les critère date et rôle.
 */
function _all_role_and_date() {
	
	$query_base = db_select('node', 'n');
	$query_base->innerJoin('field_data_field_priorite', 'fp', 'fp.entity_id = n.nid');
	$query_base->fields('n', array('nid'));
	$query_base->condition('n.status', 1);
	$query_base->condition('n.type', 'rule_bloc_cxm');
	$query_base->orderBy('fp.field_priorite_value', 'ASC');
	$query_base->groupBy('n.nid');
	
	// On ajoute le filtre sur le profil user	.
	$query_base->innerJoin('field_data_field_critere_role', 'cr', 'cr.entity_id = n.nid');
	$query_base->innerJoin('role', 'r', 'cr.field_critere_role_value = r.rid');
	
	//on ajoute le critère de date .
	$current_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
	$query_base->leftJoin('field_data_field_critere_sur_la_date', 'cd', ' cd.entity_id = n.nid');
	$query_base->isNotNull('cd.field_critere_sur_la_date_value');
	$query_base->isNotNull('cd.field_critere_sur_la_date_value2');
	
	$nids = $query_base->execute()->fetchCol();
    
	return !empty($nids) ? $nids : FALSE;
}

/* 
 * Remonte les filtres avec un critère date ou role validés;
 * Exclu de celle-ci les filtre possédant role ET date. 
 */
function _check_role_or_date($current_nid = FALSE, $rules_matched = array(), $both_roledate_nids = array()) {
	global $user;
	$exclude_ids = array();
	if ($current_nid) {
		$exclude_ids[] = $current_nid;
	}
	if (!empty($rules_matched)) {
		$rules_matched = explode('|', $rules_matched);
		$exclude_ids = array_merge($exclude_ids, $rules_matched);
	}
    
	$query_base = db_select('node', 'n');
	$query_base->innerJoin('field_data_field_priorite', 'fp', 'fp.entity_id = n.nid');
	$query_base->fields('n', array('nid'));
	$query_base->condition('n.status', 1);
	$query_base->condition('n.type', 'rule_bloc_cxm');
	$query_base->orderBy('fp.field_priorite_value', 'ASC');
	$query_base->groupBy('n.nid');
	
	// On ajoute le filtre sur le profil user	OU date
	$query_base->leftJoin('field_data_field_critere_role', 'cr', 'n.nid = cr.entity_id');
	$query_base->leftJoin('field_data_field_critere_sur_la_date', 'cd', 'n.nid = cd.entity_id');
	$query_base->leftJoin('role', 'r', 'cr.field_critere_role_value = r.rid');
	
	//on ajoute le critère de date en premier lieu
	$current_time = mktime(0, 0, 0, date('m'), date('d'), date('Y'));
	$and_date = db_and();
	$and_date->condition('cd.field_critere_sur_la_date_value', $current_time, '<=');
	$and_date->condition('cd.field_critere_sur_la_date_value2', $current_time, '>=');
	
	$or_cond = db_or();
	$or_cond->condition('r.name', $user->roles, 'in');
	$or_cond->condition($and_date);
	
	$query_base->condition($or_cond);
	
	// on exclu aussi de la requète les résultat ayant date et role pour ne pas matché des doublons
	if (!empty($both_roledate_nids)) {
		$query_base->condition('n.nid', $both_roledate_nids, 'not in');
	}
	
	// si on est sur la page d'un noeud on va chercher les bloc REM qui ont pour target ce noeud
	// afin de les exclure de la requête, via une sous-requête.
	if (!empty($exclude_ids)) {
		$subquery = db_select('node', 'n');
		$subquery->fields('n', array('nid'));
		$subquery->innerJoin('field_data_field_bloc_rem_link', 'fl', 'n.nid = fl.entity_id');
		$subquery->condition('n.type', 'bloc_rem');
		$subquery->condition('fl.field_bloc_rem_link_nid', $exclude_ids, 'in');
	
		$query_base->innerJoin('field_data_field_bloc_a_afficher', 'fba', 'n.nid = fba.entity_id');
		$query_base->condition('fba.field_bloc_a_afficher_target_id', $subquery, 'not in');
	}
	$nids = $query_base->execute()->fetchCol();
	
	$q = db_select('node', 'n');
	$q->fields('n', array('nid'));
	$q->innerJoin('field_data_field_bloc_rem_link', 'fl', 'n.nid = fl.entity_id');
	$q->condition('n.type', 'bloc_rem');
	$q->condition('fl.field_bloc_rem_link_nid', $exclude_ids, 'in');
	$nidsss = $q->execute()->fetchCol();
	
	return !empty($nids) ? node_load_multiple($nids) : FALSE;
}

/* 
 * Remonte les filtres avec des critère de tag uniquement 	
 */
function _check_on_tag_only($current_nid = FALSE, $rules_matched = array()) {
	global $user;
	$exclude_ids = array();
	if ($current_nid) {
		$exclude_ids[] = $current_nid;
	}
	if (!empty($rules_matched)) {
		$rules_matched = explode('|', $rules_matched);
		$exclude_ids = array_merge($exclude_ids, $rules_matched);
	}
	
	/* On commence par faire les requête qui remonte les filtres ayant un critère data ou rôle pour
	 * pouvoir exclure ces id des résultat de la requête principale 
	 */ 
	$subquery_role = db_select('node', 'n');
	$subquery_role->fields('n', array('nid'));
	$subquery_role->condition('n.type', 'rule_bloc_cxm');
	$subquery_role->groupBy('n.nid');
	// On ajoute la jointure strict sur le profilpour exclure les éléments par la suite
	$subquery_role->innerJoin('field_data_field_critere_role', 'cr', 'n.nid = cr.entity_id' );
	
	$subquery_date = db_select('node', 'n');
	$subquery_date->fields('n', array('nid'));
	$subquery_date->condition('n.type', 'rule_bloc_cxm');
	$subquery_date->groupBy('n.nid');
	// On ajoute la jointure strict sur la date pour exclure les éléments par la suite
	$subquery_date->innerJoin('field_data_field_critere_sur_la_date', 'cd', 'cd.entity_id = n.nid');
	
	
	// La requète va remonter tous les contenus qui ne sont pas un résultat des 2 requètes précédente.
	$query_tags_only = db_select('node', 'n');
	$query_tags_only->innerJoin('field_data_field_priorite', 'fp', 'fp.entity_id = n.nid');
	// l'innerjoin oblige la présence de critere tag dans le filre
	$query_tags_only->innerJoin('field_data_field_regles_sur_les_tags', 'ft', 'ft.entity_id = n.nid');
	$query_tags_only->fields('n', array('nid'));
	$query_tags_only->condition('n.status', 1);
	$query_tags_only->condition('n.type', 'rule_bloc_cxm');
	$query_tags_only->condition('n.nid', $subquery_role, 'not in');
	$query_tags_only->condition('n.nid', $subquery_date, 'not in');
	$query_tags_only->orderBy('fp.field_priorite_value', 'ASC');
	$query_tags_only->groupBy('n.nid');
	
	// si on est sur la page d'un noeud on va chercher les bloc REM qui ont pour target ce noeud
	// afin de les exclure de la requête, via une sous-requête.
	if (!empty($exclude_ids)) {
		$subquery = db_select('node', 'n');
		$subquery->fields('n', array('nid'));
		$subquery->innerJoin('field_data_field_bloc_rem_link', 'fl', 'n.nid = fl.entity_id');
		$subquery->condition('n.type', 'bloc_rem');
		$subquery->condition('fl.field_bloc_rem_link_nid', $exclude_ids, 'in');
	
		$query_tags_only->innerJoin('field_data_field_bloc_a_afficher', 'fba', 'n.nid = fba.entity_id');
		$query_tags_only->condition('fba.field_bloc_a_afficher_target_id', $subquery, 'not in');
	}
	
	$nids = $query_tags_only->execute()->fetchCol();
	
	return !empty($nids) ? node_load_multiple($nids) : FALSE;
}
