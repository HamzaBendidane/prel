<?php

/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - $title: the (sanitized) title of the node.
 * - $content: An array of node items. Use render($content) to print them all,
 *   or print a subset such as render($content['field_example']). Use
 *   hide($content['field_example']) to temporarily suppress the printing of a
 *   given element.
 * - $user_picture: The node author's picture from user-picture.tpl.php.
 * - $date: Formatted creation date. Preprocess functions can reformat it by
 *   calling format_date() with the desired parameters on the $created variable.
 * - $name: Themed username of node author output from theme_username().
 * - $node_url: Direct URL of the current node.
 * - $display_submitted: Whether submission information should be displayed.
 * - $submitted: Submission information created from $name and $date during
 *   template_preprocess_node().
 * - $classes: String of classes that can be used to style contextually through
 *   CSS. It can be manipulated through the variable $classes_array from
 *   preprocess functions. The default values can be one or more of the
 *   following:
 *   - node: The current template type; for example, "theming hook".
 *   - node-[type]: The current node type. For example, if the node is a
 *     "Blog entry" it would result in "node-blog". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node-teaser: Nodes in teaser form.
 *   - node-preview: Nodes in preview mode.
 *   The following are controlled through the node publishing options.
 *   - node-promoted: Nodes promoted to the front page.
 *   - node-sticky: Nodes ordered above other non-sticky nodes in teaser
 *     listings.
 *   - node-unpublished: Unpublished nodes visible only to administrators.
 * - $title_prefix (array): An array containing additional output populated by
 *   modules, intended to be displayed in front of the main title tag that
 *   appears in the template.
 * - $title_suffix (array): An array containing additional output populated by
 *   modules, intended to be displayed after the main title tag that appears in
 *   the template.
 *
 * Other variables:
 * - $node: Full node object. Contains data that may not be safe.
 * - $type: Node type; for example, story, page, blog, etc.
 * - $comment_count: Number of comments attached to the node.
 * - $uid: User ID of the node author.
 * - $created: Time the node was published formatted in Unix timestamp.
 * - $classes_array: Array of html class attribute values. It is flattened
 *   into a string within the variable $classes.
 * - $zebra: Outputs either "even" or "odd". Useful for zebra striping in
 *   teaser listings.
 * - $id: Position of the node. Increments each time it's output.
 *
 * Node status variables:
 * - $view_mode: View mode; for example, "full", "teaser".
 * - $teaser: Flag for the teaser state (shortcut for $view_mode == 'teaser').
 * - $page: Flag for the full page state.
 * - $promote: Flag for front page promotion state.
 * - $sticky: Flags for sticky post setting.
 * - $status: Flag for published status.
 * - $comment: State of comment settings for the node.
 * - $readmore: Flags true if the teaser content of the node cannot hold the
 *   main body content.
 * - $is_front: Flags true when presented in the front page.
 * - $logged_in: Flags true when the current user is a logged-in member.
 * - $is_admin: Flags true when the current user is an administrator.
 *
 * Field variables: for each field instance attached to the node a corresponding
 * variable is defined; for example, $node->body becomes $body. When needing to
 * access a field's raw values, developers/themers are strongly encouraged to
 * use these variables. Otherwise they will have to explicitly specify the
 * desired field language; for example, $node->body['en'], thus overriding any
 * language negotiation rule that was previously applied.
 *
 * @see template_preprocess()
 * @see template_preprocess_node()
 * @see template_process()
 *
 * @ingroup themeable
 */
$query_parameters = drupal_get_query_parameters();

if (isset($query_parameters['mediathequePath'])) {
    $urlBackMedia = url(str_replace('/ajax', '', $query_parameters['mediathequePath']), array('absolute' => true));
} else {
    $urlBackMedia = url('mediatheque', array('absolute' => true));
}
?>
<div id="node-<?php print $node->nid; ?>" class="<?php print $classes; ?> clearfix"<?php print $attributes; ?>>

  <!-- Rendered text_resize and print_ui blocks in content region -->
  <div class="print-resize on-top">
    <div class="back-btn">
      <a href="<?php print $urlBackMedia; ?>" class="back" alt="Retour">Retour à la médiatheque</a>
    </div>
    
    <div class="block-print-ui">
      <?php
        $print_ui_block = module_invoke('print_ui', 'block_view', 'print-links');
        print render($print_ui_block['content']);
      ?>
    </div>

    <div class="block-text-resize">
      <?php
        $text_resize_block = module_invoke('text_resize', 'block_view', '0');
        print render($text_resize_block['content']);
      ?>
    </div>
    <div class="clearfix"></div>
  </div>

  <?php print render($title_prefix); ?>
  <?php //if (!$page): ?>
    <h1<?php print $title_attributes; ?>><?php print $title; ?></h1>
  <?php //endif; ?>

  <?php print render($title_suffix); ?>

  <div class="content"<?php print $content_attributes; ?>>
    <?php
      // We hide the comments and links now so that we can render them later.
      hide($content['comments']);
      hide($content['links']);

      if (!empty($content['field_media_doc'])) {
        hide($content['field_media_doc']);
      }

      print render($content);

      if (!empty($content['field_media_doc'])) {        

        $media_document = array_values($content['field_media_doc'][0]['asset']);

        // Special condition if the type file is "pdf"
        if(isset($media_document[0]['field_asset_document_file']) && !empty($media_document[0]['field_asset_document_file'])) {        
          $media_document = $media_document[0]['field_asset_document_file'][0]['#file'];
          $media_document_url = file_create_url($media_document->uri);
          echo '<div class="media-doc">' . l(t('Télécharger le document'), $media_document_url, array('attributes' => array('class' => array('media-document')))) . '</div>';
        } elseif($media_document[0]['field_asset_document_pdf_file'] && !empty($media_document[0]['field_asset_document_pdf_file'])) {
          $media_document = $media_document[0]['field_asset_document_pdf_file'][0]['#file'];
          $media_document_url = file_create_url($media_document->uri);
          echo '<div class="media-doc">' . l(t('Télécharger le document'), $media_document_url, array('attributes' => array('class' => array('media-document'), 'target' => '_blank'))) . '</div>';
        }

      }
    ?>
  </div>
</div>

<?php if ($node->CGU['display']) { ?>
    <div id="CGU" class="colorbox" style="display:none;">
        <?php print $node->CGU['content']; ?>
            <div id="messagesCGU">
                <div class="messages error">
                    <h2 class="element-invisible">Error message</h2>
                    <?php if ($node->CGU['errors']) : ?>
                      <?php print $node->CGU['errors'] ?>
                    <?php endif; ?>
                </div>
             </div>
        <?php print $node->CGU['form']; ?>
    </div>
<?php } ?>

<?php if ($node->CPU['display']) { ?>
    <div id="CPU" class="colorbox" style="display:none;">
        <?php print $node->CPU['content']; ?>
            <div id="messagesCPU">
                <div class="messages error">
                    <h2 class="element-invisible">Error message</h2>
                    <?php if ($node->CPU['errors']) : ?>
                      <?php print $node->CPU['errors'] ?>
                    <?php endif; ?>
                </div>
             </div>
        <?php print $node->CPU['form']; ?>
    </div>
<?php } ?>